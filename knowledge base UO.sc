grab взять итемы 
grab 100 взять 100 итемов с кучи 
waittargetobject rune; useobject wand юзаем ванд рекола и таргет на руну 
cast Recall rune каст рекола на руну 
hide поместить итем в хайд 
emptycontainer 320 взять все итемы с контейнера 
massmove 320 10 перетащить 10 похожих вещей 
setreceivingcontainer задать сумку в ктороую будут падать вещи через grab или emptycontainer 
setdress 1 сохранить армор под значением 1 
dress 1 одеть армор под значением 1 
undress снять весь армор 
setdressspeed 360 задать скорость смены оружия и армора 
setarm 1 сохранить оружие в руках под значением 1 
arm 1 взять в руки оружие под значением 1 
automenu автоматически делать выбор в меню 
cancelmenu прервать выбор в меню 
waitmenu автоматически сделать выбор в меню 
arm вооружиться набором name 
disarm разоружиться 
dismount спешиться (мало где работает) 
dress одеть набор 
equip одеть вещь 
equipt одеть вещь указаного типа 
mount верхом (мало где работает) 
removeearrings снять серёжки 
removehat снять шляпу 
removeneckless снять ожерелье 
removering снять кольцо 
setarm сохранить набор оружия 
setdress сохранить набор одежды 
setdressspeed скорость одевания/вооружения 
undress раздеться 
unequip снять предмет 
unsetarm удалить набор оружия 
unsetdress удалить набор одежды 
infogump информация о последнем гампе (меню) 
ongump автоответ на появление гампов 
msg произнести фразу (минуя клиент) 
sayu произнести фразу (набрав в клиенте) 
showjournal отобразить журнал Injection 
textclear очистить текстовое окно 
textclose закрыть текстовое окно 
textopen открыть текстовое окно 
textprint вывод в текстовое окно 
drop бросить на землю 
drophere бросить под ноги 
emptycontainer выгрести всё из контейнера 
findtype искать вещь по типу и условиям 
grab взять обьект 
ignore игнорировать обьект при поиске 
ignorereset отмена игнорирования всех обьектов 
info информация по обьекту 
massmove переброска однотипных вещей 
masspricemove укладка вещей вендору с ценой (АоП) 
moveitem переместить вещь 
setcatchbag установить автопереброс вещей 
setreceivingcontainer установки приёмного контейнера 
unsetcatchbag прекратить автопереброску вещей 
unsetreceivingcontainer приёмный контейнер - бекпак 
usefromground использовать предмет в мире по типу 
useobject использовать предмет 
usetype использовать предмет в сумке по типу 
addgate добавить заряд портала к рунбуке 
addrecall добавить заряд рекола к рунбуке 
gate поставить гейт по рунбуке 
recall реколиться по рунбуке 
setdefault руна по умолчанию в рунбуке 
buy купить у вендора набор 
repbuy повторить покупку (мало где работает) 
sell продать набор 
shop открыть меню наборов покупки/продажи 
addobject новый обьект 
addtype новый тип обьекта 
closeuo закрыть UO 
concolor сменить цвет сообщений инжекта 
debug выдать версию модификации 
dump записать мир в лог файл 
easyobject преобразовать в литерал EasyUO 
exec запустить скрипт 
filterspeech фильтр речи 
filterweather включить/выключить погоду 
fixhotkeys обновить захват клавиш 
fixtalk включить речь для старых шардов 
fixwalk включить хотьбу для старых шардов 
flush обновить лог файл 
fontcolor установить цвет речи 
forget удалить обьект из памяти 
infocolor цвет обьекта 
launch запуск внешней программы 
light уровень освещения 
moveoff отмена запрета на движение 
moveon запрет на движение 
saveconfig сохранить установки 
set дополнительные установки 
shard дополнительные установки 
shutdownwindows выключить компьютер 
version базовая версия 
canceltarget прервать ловушку прицела 
infotile информация о тайле прицела 
target послать прицел 
waittargetground ловушка прицела на обьект в мире 
waittargetlast ловушка прицела на последнюю мишень 
waittargetobject ловушка прицела на обьект(ы) 
waittargetobjecttype ловушка прицела на обьект и тип 
waittargetself ловушка прицела на себя 
waittargettile ловушка прицела на место в мире 
waittargettype ловушка прицела на тип в сумке 
cast кастовать (колдовать) заклинание 
useskill использовать указаный скил (умение) 
attack атаковать обьект 
bandageself бинтоваться 
boxhack не давать закрыться контейнеру 
click щёлкнуть по обьекту (вызвать имя) 
dye указать цвет краски 
getstatus запросить здоровье обьекта 
hide скрыть с экрана обьект 
morph изменение вида персонажа 
opendoor открыть ближайшую дверь 
playwav проиграть указаный wav-файл 
poison отравить вещь скилом Poisoning 
resend обновить экран и координаты 
setseason установить сезон 
snoop отобразить рисунок сумки 
sound проиграть игровой звук 
track отобразить маркер к указаному месту 
warmode вкл/выкл режима боя

UO.Life - текущее здоровье вашего чара 
UO.Mana - текущее количество маны вашего чара 
UO.Stamina - текущее количество стамины вашего чара 
UO.STR - уровень силы вашего чара 
UO.INT - уровень интеллекта вашего чара 
UO.DEX - уровень ловкости вашего чара 
UO.Weight - вес вашего чара 
UO.Armor - текущий армор-класс вашего чара 
UO.Gold - суммарное количество денег (бэкпак и банк) вашего чара 
UO.BM - количество рега bloodmoss в паке у вашего чара 
UO.BP - количество рега black pearl в паке у вашего чара 
UO.GA - количество рега garlic в паке у вашего чара 
UO.GS - количество рега ginseng в паке у вашего чара 
UO.MR - количество рега mandrake root в паке у вашего чара 
UO.NS - количество рега nightshade в паке у вашего чара 
UO.SA - количество рега sulfurous ash в паке у вашего чара 
UO.SS - количество рега spider's silk в паке у вашего чара 
UO.VA - количество паган рега volcanic ash в паке у вашего чара 
UO.EN - количество паган рега eyes of newt в паке у вашего чара 
UO.WH - - количество паган рега wyrm's heart в паке у вашего чара 
UO.FD - количество паган рега blackmoor в паке у вашего чара 
UO.BR - количество паган рега fertile dirt в паке у вашего чара 
UO.H - количество поушенов heal в паке у вашего чара 
UO.C - количество поушенов cure в паке у вашего чара 
UO.M - количество поушенов mana в паке у вашего чара 
UO.L - количество поушенов refresh в паке у вашего чара 
UO.B - количество бинтов в паке у вашего чара 
UO.AR - количество стрел в паке у вашего чара 
UO.BT - количество болтов в паке у вашего чара

_ИЛИ,ПЕРЕДhide - скрыть объект - ПРИМЕР  _hide ИЛИ ,hide

_ИЛИ,ПЕРЕДresend - отобразить все скрытые объекты - ПРИМЕР  _resend ИЛИ ,resend

_ИЛИ,ПЕРЕДinfo - сведения об объекте - ПРИМЕР  _info ИЛИ ,info
Type=0x0F9E - Тип объекта - это номер его графического представления в игре


sub - начало скрипта
Sub - начало скрипта с заглавной буквы, скрипт не будет отражаться в списке скриптов
sub / Sub НАЗВАНИЕ СКРИПТА MyWait() - ПРИМЕР sub MyWait()  ИЛИ  Sub MyWait()
endsub - конец скрипта

VAR Переменная - это какое-то имя, заданное вами, 
которому в скрипте вы можете присваивать различные значения.
VAR myvar1, myvar2, myvar3
Имена myvar1 и т.д. - это просто пример имен. Имя может быть любым,
главное чтобы оно состояло из английских букв и цифр и не имело пробелов.
Дефисы тоже допустимы. Цифру в начало имени не ставим

If является простейшим способом проверки выполнения условия
используем знак == - сравнение двух значений. Не путайте его с присваиванием (=)
условие не выполняется и будет выполнено действие после Else
Endif - конец условия
ПРИМЕР
Простейший условный оператор - If. Выглядит он так: 
Code: 
If условие Then 
......... 
Endif

Если условие выполняется тогда делать то-то и то-то. Расширенный вариант этого условного оператора: 
Code: 
If условие Then 
........... 
Else - если не выполнено условия
........... 
Endif - конец условия

Следующим оператором, важным для скриптинга в инжекте является while. 
while - Повторять действия до тех пор, пока выполняется условие
Wend - конец условия
ПРИМЕР
VAR i = 1 
VAR mymessage1 = 'Hello, Shard!', mymessage2 = "I go!" 
While i < 3 
If i == 1 Then 
UO.Say( mymessage1 ) 
Else 
UO.Say( mymessage2 ) 
Endif 
i = i + 1 
Wend 

while i < 3 - цикл выполняется пока i меньше 3
wait( 1000) 
wend

repeat - цикл выполняется пока не выполняется i > 2
wait(1000) 
until i > 2


UO.Print() – вывести информационное сообщение в игре, ПРИМЕР UO.Print( "I go!" )
UO.Say() - произнести фразу чаром в игре, ПРИМЕР UO.Say( "I go!" )   
   
Wait() - ждать заданное количество миллисекунд

все имена указателей в скриптах всегда должны писаться в кавычка
'finditem' - 
ContainerOf - проверить местоположение конкретного объекта по сериалу
UO.ContainerOf( object ) - возвращает параметр объекта object (по умолчанию - персонажа игрока) - контейнер, в котором находится этот объект. 
0xFFFFFFFF' - что означает: на земле или неизвестно где (если предмет находится на земле, 
мы всегда сможем понять где он командами определения дистанции до объекта, об этом мы поговорим позже)

Теперь мы приходим к наиболее распространенной ситуации - когда нам неизвестен сериал объекта, который мы хотим использовать. 
Мы знаем только его тип и (необязательно) цвет. Тогда нам надо найти этот объект. Для такого поиска служит команда Findtype.

UO.UseObject( object ) - Использовать указанный объект.

UO.UseType( type [, color ] ) - Искать в бекпаке или подсумках (а также в руках или на чаре) объект по указанному типу и цвету (если задано) и использовать найденный.

UO.UseFromGround( type [, color ] ) - Искать на земле объект по указанному типу и цвету (если задано) и использовать найденный.

UO.FindType( type, [ color, containerobject/ground/my ] ) - ищет обьект указаного типа type и цвета color в указаном контейнере 
и помещает найденый обьект в системный указатель finditem.

Если тип type указан '-1' или '0xffff' то ищутся обьекты любого типа. 
Если цвет color не указан, указан '-1' или '0xffff' то ищутся обьекты любого цвета. 
Если контейнер object указан, то ищется в контейнере. Если не указан, указан '-1' или '0xffff', или указан ошибочно то ищутся обьекты в бекпаке персонажа. 
указан 'ground' или '1' то обьект ищется на земле, в радиусе устанавливаемом ,set finddistance. 
Если указан 'my' или '2' то ищется в бекпаке и всех подсумках. 
Нельзя указывать контейнер для поиска не указав цвет color

Например
UO.Findtype( '0x1BEF') будет искать инги (указан тип ингов) в паке персонажа (остальные параметры опущены, соответственно по умолчанию ищутся объекты любого цвета в паке персонажа).
UO.Findtype( '0x1BEF', '0x0000' ) будет искать инги указанного цвета в паке персонажа.
UO.Findtype( '0x1BEF', '0x0000', '0x12345678' ) будет искать инги указанного цвета в контейнере с сериалом '0x12345678'.

UO.Ignore( object, [ on/off ] ) - указывает что обьект должен игнорироваться (или не игнорироваться, с параметром off) 
при последующих командах поиска, например findtype. Разрешить поиск всех обьектов снова можно командой UO.IgnoreReset()
После находения нужного нам объекта (если мы использовали Ignore) желательно очистить список игнорируемых объектов 
командой IgnoreReset (чтобы не было проблем при последующих поисках).

UO.IgnoreReset() - Включает в поиск все обьекты, которые были указаны как игнорируемые командой Ignore

UO.GetQuantity( 'finditem' ) - GetQuantity - считает количество объектов в указанной стопке

UO.GetSerial( 'finditem' ) - Если же нам нужен (для каких-нибудь целей) сериал этого объекта
VAR MySerial = UO.GetSerial( 'finditem' ) - После такого "считывания" сериала найденного объекта мы можем использовать как MySerial, 
так и 'finditem' совершенно одинаково, только 'finditem' изменит свое содержимое при следующем поиске.

UO.FindCount() - Возвращает количество обьектов, найденых последней командой FindType.
UO.Findtype( '0x1BEF' ) 
If UO.FindCount() > 0 Then 
.... ; используем найденный объект через указатель 'finditem') 
Else 
UO.Print( 'Нету ингов!' ) 
Endif

UO.Set( 'finddistance', '6' ) - устанавливает параметр finddistance в 6 тайлов (клеток).
UO.GetDistance - эта команда возвращает расстояние до объекта

встроенные функции
str( число) - преобразует число в строку 
int( строка) - преобразует строку в число 

UO.GetNotoriety( object ) - возвращает параметр обьекта object (по умолчанию - персонажа игрока) - злобность (цвет). Значения такие: 
1 - Innocent (синий), 2 - Friend (зелёный), 3 - Gray (серый), 4 - Criminal (серый), 5 - Enemy (рыжий), 6 - Murderer (красный).

UO.Click( object ) - эмулирует клик левой клавишей мышки по указанному объекту.

UO.GetName( object ) - Возвращает параметр обьекта object (по умолчанию - персонажа игрока) - имя обьекта.

UO.Count( type [, color ] ) - Возвращает суммарное количество во всех стопках обьекта указаного 
типа type (и цвета color если указано) в вашем бекпаке и подсумках. Учитываются только те подсумки которые хоть раз открывались,
иначе их содержимое не известно. Эта команда очень удобна для подсчета имеющегося у вас какого-то конкретного типа объектов.
В подсчет входят и те объекты, которые надеты на чара (одежда) или находятся в руках чара (инструменты, оружие, щиты).
Цвет color можно не указывать.

For переменная = начальное значение To конечное значение
будет при каждом повторе цикла автоматически наращиваться (к ней будет прибавляться единица), 
в диапазоне от начального до конечного значений.

For i = 1 To 5
...... 
Next 

В качестве границ (начального и конечного условия) могут выступать и переменные, то есть можно написать и так: 

Code: 
sub TestFor() 
VAR i, x = 5 
For i = 1 To x 

Вот такая команда объявляет создание массива под указанным именем и имеющим указанный размер.

DIM имя_массива[размер_массива]

Надо помнить только одно - элементы массива нумеруются с 0. То есть в массиве с размером 3 будет три элемента: с номерами 0, 1 и 2.
 Давайте запишем в нашем примере реги в виде массива: 

Code: 
sub GetRecallRegs() 
DIM Regs[3] 
Regs[0] = '0x0F7A' ; Black Pearl 
Regs[1] = '0x0F7B' ; Blood Moss 
Regs[2] = '0x0F86' ; Mandrake Root 
... 
endsub

sub GetRegs() 
DIM Regs[8] 
Regs[0] = '0x0F7A' ; Black Pearl 
Regs[1] = '0x0F7B' ; Bood Moss 
Regs[2] = '0x0F86' ; Mandrake Root 
Regs[3] = '0x0F84' ; garlic 
Regs[4] = '0x0F85' ; Ginseng 
Regs[5] = '0x0F88' ; Night Shade 
Regs[6] = '0x0F8C' ; Sulphorous Ash 
Regs[7] = '0x0F8D' ; Spiders Silk 
VAR i 
VAR sunduk = '0x87654321' ; сундук с регами 
For i = 0 To 7 
If UO.Count( Regs[ i ] ) == 0 Then 
; ищем данный рег в сундуке 
UO.FindType( Regs[ i ], '-1', sunduk ) 
; проверяем нашли ли что-то 
If UO.FindCount() > 0 Then 
; берем 1 штучку этого рега в пак 
UO.MoveItem( 'finditem', '1' ) 
; паузу надо обязательно, иначе нас заблокирует сервер! 
wait( 1000 ) 
Else 
; ну нету этого рега в сундуке! Ругнемся на это и пойдем дальше 
UO.Print( 'Netu rega!' ) 
Endif 
Endif 
Next 
endsub

Объекты ищутся обычно для того, чтобы сделать с ними что-нибудь.
Для этого нам потребуется узнать несколько новых команд:

UO.MoveItem( object [, quantity, container / ground [, x, y, z ] ] )

Команда для перемещения объекта object
Можно указать количество quantity
ыложить объект на землю ground [, x, y, z ] 
UO.MoveItem( '0x12345678', '1', 'ground', '1', '0', '0' ) - 
переместит 1 штучку из стопки указанного предмета на землю и положит
ее рядом с чаром в одной клетке на восток (координаты заданы как 
относительные и к координате X чара прибавляется одна клетка)

UO.UseObject( object ) - Использовать указанный объект.

UO.UseType( type [, color ] ) - Искать в бекпаке или подсумках 
(а также в руках или на чаре) объект по указанному типу и цвету 
(если задано) и использовать найденный.

UO.UseFromGround( type [, color ] ) - Искать на земле объект 
по указанному типу и цвету (если задано) и использовать найденный.

Вот имеющиеся модификаторы: 
Code: 
_ (подчеркивание) - Форма записи: _type (например '_0x0F88' ) - 
Ищет по типу на чаре, в бекпаке, подсумках

^ (крышка) - Форма записи: ^type (например '^0x0F88') - 
Ищет в бекпаке без подсумок

~ (тильда) - Форма записи: ~type (например '~0x0F88') - 
Ищет на земле в заданном (команда set findistance) радиусе

< (меньше) - Форма записи: <type (например '<0x0F88') - 
Ищет по типу в последнем открытом контейнере

. (точка) - Форма записи: object.type (например '0x87654321.0x0F88') - 
Ищет по типу в указанном контейнере.

lastobject - Последний использованый (двойным щелчком мыши) обьект

backpack - Текущий бекпак вашего персонажа

lastcontainer - Последний контейнер открытый сервером для вас

laststatus - Последнее существо, на которое была запрошена информация о здоровье. Это происходит например если вы используете встроеный в клиент макрос Target Next

lastattack - Последнее существо, которое вы атаковали

lastcorpse - Последний появившийся в области радиусом два экрана труп.

finditem - Обьект найденый командой findtype.

self - Ваш чар (персонаж).

uo.waittargetself() - Ловушка ставится на себя
( тоесть прицел следует на вашего персонажа ).

uo.waittargetself() 
uo.Cast('Greater Heal')
или 
uo.waittargetself() 
uo.UseType(bandages) # Бинты

заменить всё это можно и проще:  

uo.Cast('Greater Heal','self')
uo.bandageself()

uo.waittargettype(type,[color]) - Ловушка ставится на объект найденый 
в бекпеке и подсумках по типу(и цвету)

uo.waittargettype(' Type ') 
uo.UseSkill('Poisoning')

uo.waittargetobject(object,[object2]) - Эта команда, в отличии от предыдущей, 
ставит ловушку на определённый предмет(объект) который задаётся по ID.

uo.waittargetobject('ID Rune') 
uo.Cast('Recall')

В некоторых случаях появляются несколько прицелов в последовательности,
- для этого и предназначен второй объект.Как только появится прицел-он 
попадёт в ловушку на первый объект, и если указан второй объект-то при 
появившемся втором прицеле-его поймает ловушка второго объекта.

uo.waittargetground(type,[color]) - Ищет на земле объект по типу и цвету
(если задано), и устанавливает на указанный объект ловушку прицела.
Аналогично предыдущей команде.

uo.waittargetobjecttype(object,type,[color]) - Она же совмещает 2
предыдущих команды, и устанавливает прицел на объект который 
ищется и по ID и по Типу и по Цвету.

uo.waittargettile(lasttile/tilenum,[x],[y],[z]) - устанавливаем ловушку на тайл, 
который указан в параметрах.Это может быть как uo.waittargettile(lasttile) 
- тайл, на который кликали до этого, так и тайл который задаётся координатами
- uo.waittargettile(tilenum,[x],[y],[z])

if uo.InJournal('You put') then 
uo.waittargettile(lasttile) 
uo.UseType( PickAxe ) 

uo.waittargetlast() - Прицел следует на предшествующий объект, 
на котором стояла ловушка. Другими словами- повторяет предыдущую ловушку .

uo.CancelTarget() - Обнуляем прицел.

uo.infotile - (,infotile) Узнаем информацию о тайле(координаты) 

,showjournal [lines_num] 
none uo.showjournal([lines_num]) 
Отображает в текстовом окне последние lines_num строк настоящего журнала 
Injection (по умолчанию 10).

Right([text],numb) - ([строка], число символов), оставляет заданное
количество символов от строки (с права на лево) 
Left([text],numb) - ([строка], число символов), - оставляет заданное  
количество символов от строки (с лева на право)

sub main() 
var text='hello wolrd - i say!' 
uo.print(Left(text,11)) 
end sub
Скрипт выдаст нам фразу "hello world"

Mid([text],numb,numb) - ([строка],позиция,число символов), оставляет заданное 
количество символов от строки (с лева на право - начиная с заданной позиции)

sub main() 
var text='i say: hello wolrd - it sounds great' 
uo.print(Mid(text,7,11)) 
end sub
Скрипт выдаст нам фразу "hello world"